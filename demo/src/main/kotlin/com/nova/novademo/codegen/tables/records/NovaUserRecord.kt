/*
 * This file is generated by jOOQ.
 */
package com.nova.novademo.codegen.tables.records


import com.nova.novademo.codegen.tables.TNovaUser
import com.nova.novademo.codegen.tables.interfaces.INovaUser

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * USER TABLE
 */
@Suppress("UNCHECKED_CAST")
open class NovaUserRecord() : UpdatableRecordImpl<NovaUserRecord>(TNovaUser.NOVA_USER), Record7<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?>, INovaUser {

    override var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var username: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    override var email: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    override var address: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    override var createTime: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    override var updateTime: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    override var deleted: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row7<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row7<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row7<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<String?> = TNovaUser.NOVA_USER.ID
    override fun field2(): Field<String?> = TNovaUser.NOVA_USER.USERNAME
    override fun field3(): Field<String?> = TNovaUser.NOVA_USER.EMAIL
    override fun field4(): Field<String?> = TNovaUser.NOVA_USER.ADDRESS
    override fun field5(): Field<LocalDateTime?> = TNovaUser.NOVA_USER.CREATE_TIME
    override fun field6(): Field<LocalDateTime?> = TNovaUser.NOVA_USER.UPDATE_TIME
    override fun field7(): Field<String?> = TNovaUser.NOVA_USER.DELETED
    override fun component1(): String? = id
    override fun component2(): String? = username
    override fun component3(): String? = email
    override fun component4(): String? = address
    override fun component5(): LocalDateTime? = createTime
    override fun component6(): LocalDateTime? = updateTime
    override fun component7(): String? = deleted
    override fun value1(): String? = id
    override fun value2(): String? = username
    override fun value3(): String? = email
    override fun value4(): String? = address
    override fun value5(): LocalDateTime? = createTime
    override fun value6(): LocalDateTime? = updateTime
    override fun value7(): String? = deleted

    override fun value1(value: String?): NovaUserRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): NovaUserRecord {
        this.username = value
        return this
    }

    override fun value3(value: String?): NovaUserRecord {
        this.email = value
        return this
    }

    override fun value4(value: String?): NovaUserRecord {
        this.address = value
        return this
    }

    override fun value5(value: LocalDateTime?): NovaUserRecord {
        this.createTime = value
        return this
    }

    override fun value6(value: LocalDateTime?): NovaUserRecord {
        this.updateTime = value
        return this
    }

    override fun value7(value: String?): NovaUserRecord {
        this.deleted = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: LocalDateTime?, value6: LocalDateTime?, value7: String?): NovaUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: INovaUser) {
        id = from.id
        username = from.username
        email = from.email
        address = from.address
        createTime = from.createTime
        updateTime = from.updateTime
        deleted = from.deleted
    }

    override fun <E : INovaUser> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised NovaUserRecord
     */
    constructor(id: String? = null, username: String? = null, email: String? = null, address: String? = null, createTime: LocalDateTime? = null, updateTime: LocalDateTime? = null, deleted: String? = null): this() {
        this.id = id
        this.username = username
        this.email = email
        this.address = address
        this.createTime = createTime
        this.updateTime = updateTime
        this.deleted = deleted
    }
}
