/*
 * This file is generated by jOOQ.
 */
package com.nova.novademo.codegen.tables.daos


import com.nova.novademo.codegen.tables.TNovaUser
import com.nova.novademo.codegen.tables.pojos.NovaUserPojo
import com.nova.novademo.codegen.tables.records.NovaUserRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * USER TABLE
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class NovaUserDao(configuration: Configuration?) : DAOImpl<NovaUserRecord, NovaUserPojo, String>(TNovaUser.NOVA_USER, NovaUserPojo::class.java, configuration) {

    /**
     * Create a new NovaUserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: NovaUserPojo): String? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: String?, upperInclusive: String?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: String): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: String): NovaUserPojo? = fetchOne(TNovaUser.NOVA_USER.ID, value)

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUsername(lowerInclusive: String?, upperInclusive: String?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.USERNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    fun fetchByUsername(vararg values: String): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.USERNAME, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.EMAIL, *values)

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAddress(lowerInclusive: String?, upperInclusive: String?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    fun fetchByAddress(vararg values: String): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.ADDRESS, *values)

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCreateTime(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.CREATE_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    fun fetchByCreateTime(vararg values: LocalDateTime): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.CREATE_TIME, *values)

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUpdateTime(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.UPDATE_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    fun fetchByUpdateTime(vararg values: LocalDateTime): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.UPDATE_TIME, *values)

    /**
     * Fetch records that have <code>deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfDeleted(lowerInclusive: String?, upperInclusive: String?): List<NovaUserPojo> = fetchRange(TNovaUser.NOVA_USER.DELETED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    fun fetchByDeleted(vararg values: String): List<NovaUserPojo> = fetch(TNovaUser.NOVA_USER.DELETED, *values)
}
